0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g' ]
2 info using npm@2.5.1
3 info using node@v0.12.0
4 verbose node symlink /usr/local/bin/node
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/weaamalgheraibi/Desktop/NEI/OSCTR/ls-seed',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package.tgz',
9 verbose tar pack   '/Users/weaamalgheraibi/Desktop/NEI/OSCTR/ls-seed' ]
10 verbose tarball /Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package.tgz
11 verbose folder /Users/weaamalgheraibi/Desktop/NEI/OSCTR/ls-seed
12 info prepublish LsSeed@0.0.3
13 verbose addLocalTarball adding from inside cache /Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package.tgz
14 silly cache afterAdd LsSeed@0.0.3
15 verbose afterAdd /Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package/package.json not in flight; writing
16 verbose afterAdd /Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package/package.json written
17 silly install resolved [ { name: 'LsSeed',
17 silly install resolved     mobilePackageName: 'com.labshare.lsseed',
17 silly install resolved     version: '0.0.3',
17 silly install resolved     description: 'This app is a demo for the AngularJS_RequireJS_Seed',
17 silly install resolved     main: './index.html',
17 silly install resolved     author: { name: 'Kuan Cao' },
17 silly install resolved     devDependencies:
17 silly install resolved      { grunt: '~0.4.4',
17 silly install resolved        'grunt-bower-requirejs': '^2.0.0',
17 silly install resolved        'grunt-contrib-clean': '~0.6.0',
17 silly install resolved        'grunt-contrib-compass': '^1.0.1',
17 silly install resolved        'grunt-contrib-connect': '^0.9.0',
17 silly install resolved        'grunt-contrib-copy': '~0.4.0',
17 silly install resolved        'grunt-contrib-watch': '^0.6.1',
17 silly install resolved        'grunt-execute': '~0.2.2',
17 silly install resolved        'grunt-express-server': '^0.4.19',
17 silly install resolved        'grunt-karma': '^0.9.0',
17 silly install resolved        'grunt-node-webkit-builder': '0.3.1',
17 silly install resolved        'grunt-shell': '^1.1.1',
17 silly install resolved        gulp: '^3.8.6',
17 silly install resolved        'gulp-concat': '^2.3.3',
17 silly install resolved        'gulp-concat-sourcemap': '^1.3.1',
17 silly install resolved        'gulp-ng-annotate': '^0.2.0',
17 silly install resolved        'gulp-sourcemaps': '^0.4.5',
17 silly install resolved        'gulp-uglify': '^0.3.1',
17 silly install resolved        'http-server': '^0.7.4',
17 silly install resolved        'jasmine-core': '^2.1.3',
17 silly install resolved        karma: '^0.12.31',
17 silly install resolved        'karma-chrome-launcher': '^0.1.7',
17 silly install resolved        'karma-coverage': '^0.2.7',
17 silly install resolved        'karma-jasmine': '^0.2.2',
17 silly install resolved        'karma-nodewebkit-launcher': '0.0.9',
17 silly install resolved        'karma-phantomjs-launcher': '^0.1.4',
17 silly install resolved        'karma-requirejs': '^0.2.2',
17 silly install resolved        'node-webkit-builder': '0.3.2',
17 silly install resolved        requirejs: '~2.1.14' },
17 silly install resolved     repository: { type: 'git', url: 'git@github.com:LabShare/ls-seed.git' },
17 silly install resolved     readme: '# amdefine\n\nA module that can be used to implement AMD\'s define() in Node. This allows you\nto code to the AMD API and have the module work in node programs without\nrequiring those other programs to use AMD.\n\n## Usage\n\n**1)** Update your package.json to indicate amdefine as a dependency:\n\n```javascript\n    "dependencies": {\n        "amdefine": ">=0.1.0"\n    }\n```\n\nThen run `npm install` to get amdefine into your project.\n\n**2)** At the top of each module that uses define(), place this code:\n\n```javascript\nif (typeof define !== \'function\') { var define = require(\'amdefine\')(module) }\n```\n\n**Only use these snippets** when loading amdefine. If you preserve the basic structure,\nwith the braces, it will be stripped out when using the [RequireJS optimizer](#optimizer).\n\nYou can add spaces, line breaks and even require amdefine with a local path, but\nkeep the rest of the structure to get the stripping behavior.\n\nAs you may know, because `if` statements in JavaScript don\'t have their own scope, the var\ndeclaration in the above snippet is made whether the `if` expression is truthy or not. If\nRequireJS is loaded then the declaration is superfluous because `define` is already already\ndeclared in the same scope in RequireJS. Fortunately JavaScript handles multiple `var`\ndeclarations of the same variable in the same scope gracefully.\n\nIf you want to deliver amdefine.js with your code rather than specifying it as a dependency\nwith npm, then just download the latest release and refer to it using a relative path:\n\n[Latest Version](https://github.com/jrburke/amdefine/raw/latest/amdefine.js)\n\n### amdefine/intercept\n\nConsider this very experimental.\n\nInstead of pasting the piece of text for the amdefine setup of a `define`\nvariable in each module you create or consume, you can use `amdefine/intercept`\ninstead. It will automatically insert the above snippet in each .js file loaded\nby Node.\n\n**Warning**: you should only use this if you are creating an application that\nis consuming AMD style defined()\'d modules that are distributed via npm and want\nto run that code in Node.\n\nFor library code where you are not sure if it will be used by others in Node or\nin the browser, then explicitly depending on amdefine and placing the code\nsnippet above is suggested path, instead of using `amdefine/intercept`. The\nintercept module affects all .js files loaded in the Node app, and it is\ninconsiderate to modify global state like that unless you are also controlling\nthe top level app.\n\n#### Why distribute AMD-style nodes via npm?\n\nnpm has a lot of weaknesses for front-end use (installed layout is not great,\nshould have better support for the `baseUrl + moduleID + \'.js\' style of loading,\nsingle file JS installs), but some people want a JS package manager and are\nwilling to live with those constraints. If that is you, but still want to author\nin AMD style modules to get dynamic require([]), better direct source usage and\npowerful loader plugin support in the browser, then this tool can help.\n\n#### amdefine/intercept usage\n\nJust require it in your top level app module (for example index.js, server.js):\n\n```javascript\nrequire(\'amdefine/intercept\');\n```\n\nThe module does not return a value, so no need to assign the result to a local\nvariable.\n\nThen just require() code as you normally would with Node\'s require(). Any .js\nloaded after the intercept require will have the amdefine check injected in\nthe .js source as it is loaded. It does not modify the source on disk, just\nprepends some content to the text of the module as it is loaded by Node.\n\n#### How amdefine/intercept works\n\nIt overrides the `Module._extensions[\'.js\']` in Node to automatically prepend\nthe amdefine snippet above. So, it will affect any .js file loaded by your\napp.\n\n## define() usage\n\nIt is best if you use the anonymous forms of define() in your module:\n\n```javascript\ndefine(function (require) {\n    var dependency = require(\'dependency\');\n});\n```\n\nor\n\n```javascript\ndefine([\'dependency\'], function (dependency) {\n\n});\n```\n\n## RequireJS optimizer integration. <a name="optimizer"></name>\n\nVersion 1.0.3 of the [RequireJS optimizer](http://requirejs.org/docs/optimization.html)\nwill have support for stripping the `if (typeof define !== \'function\')` check\nmentioned above, so you can include this snippet for code that runs in the\nbrowser, but avoid taking the cost of the if() statement once the code is\noptimized for deployment.\n\n## Node 0.4 Support\n\nIf you want to support Node 0.4, then add `require` as the second parameter to amdefine:\n\n```javascript\n//Only if you want Node 0.4. If using 0.5 or later, use the above snippet.\nif (typeof define !== \'function\') { var define = require(\'amdefine\')(module, require) }\n```\n\n## Limitations\n\n### Synchronous vs Asynchronous\n\namdefine creates a define() function that is callable by your code. It will\nexecute and trace dependencies and call the factory function *synchronously*,\nto keep the behavior in line with Node\'s synchronous dependency tracing.\n\nThe exception: calling AMD\'s callback-style require() from inside a factory\nfunction. The require callback is called on process.nextTick():\n\n```javascript\ndefine(function (require) {\n    require([\'a\'], function(a) {\n        //\'a\' is loaded synchronously, but\n        //this callback is called on process.nextTick().\n    });\n});\n```\n\n### Loader Plugins\n\nLoader plugins are supported as long as they call their load() callbacks\nsynchronously. So ones that do network requests will not work. However plugins\nlike [text](http://requirejs.org/docs/api.html#text) can load text files locally.\n\nThe plugin API\'s `load.fromText()` is **not supported** in amdefine, so this means\ntranspiler plugins like the [CoffeeScript loader plugin](https://github.com/jrburke/require-cs)\nwill not work. This may be fixable, but it is a bit complex, and I do not have\nenough node-fu to figure it out yet. See the source for amdefine.js if you want\nto get an idea of the issues involved.\n\n## Tests\n\nTo run the tests, cd to **tests** and run:\n\n```\nnode all.js\nnode all-intercept.js\n```\n\n## License\n\nNew BSD and MIT. Check the LICENSE file for all the details.\n',
17 silly install resolved     readmeFilename: 'README.md',
17 silly install resolved     window:
17 silly install resolved      { title: 'LS_Seed Demo',
17 silly install resolved        icon: './skull-icon.png',
17 silly install resolved        toolbar: true,
17 silly install resolved        frame: true,
17 silly install resolved        width: 1152,
17 silly install resolved        height: 755,
17 silly install resolved        min_width: 1152,
17 silly install resolved        min_height: 755,
17 silly install resolved        resizable: true,
17 silly install resolved        position: 'mouse',
17 silly install resolved        'single-instance': true,
17 silly install resolved        'node-remote': 'localhost' },
17 silly install resolved     dependencies: { 'body-parser': '^1.11.0', cors: '^2.5.3', express: '^4.11.2' },
17 silly install resolved     scripts: { start: 'http-server -a 0.0.0.0 -p 8080' },
17 silly install resolved     gitHead: '15781d618fa54c817a9623867b43f09974e99fb1',
17 silly install resolved     bugs: { url: 'https://github.com/LabShare/ls-seed/issues' },
17 silly install resolved     homepage: 'https://github.com/LabShare/ls-seed',
17 silly install resolved     _id: 'LsSeed@0.0.3',
17 silly install resolved     _shasum: '8474feb378706abb68e49041b272d9ab39e49eae',
17 silly install resolved     _from: '../../Users/weaamalgheraibi/Desktop/NEI/OSCTR/ls-seed',
17 silly install resolved     _resolved: 'file:../../Users/weaamalgheraibi/Desktop/NEI/OSCTR/ls-seed' } ]
18 info install LsSeed@0.0.3 into /usr/local/lib
19 info installOne LsSeed@0.0.3
20 verbose installOne of LsSeed to /usr/local/lib not in flight; installing
21 verbose lock using /Users/weaamalgheraibi/.npm/_locks/LsSeed-c2ea6728560c94a9.lock for /usr/local/lib/node_modules/LsSeed
22 silly install write writing LsSeed 0.0.3 to /usr/local/lib/node_modules/LsSeed
23 silly cache addNamed cb LsSeed@0.0.3
24 verbose unbuild lib/node_modules/LsSeed
25 verbose gentlyRm vacuuming /usr/local/lib/node_modules/LsSeed
26 verbose tar unpack /Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package.tgz
27 verbose tar unpacking to /usr/local/lib/node_modules/LsSeed
28 verbose gentlyRm vacuuming /usr/local/lib/node_modules/LsSeed
29 silly gunzTarPerm modes [ '755', '644' ]
30 error tar.unpack untar error /Users/weaamalgheraibi/.npm/LsSeed/0.0.3/package.tgz
31 verbose unlock done using /Users/weaamalgheraibi/.npm/_locks/LsSeed-c2ea6728560c94a9.lock for /usr/local/lib/node_modules/LsSeed
32 verbose fstream_path /usr/local/lib/node_modules/LsSeed
33 verbose fstream_type Directory
34 verbose fstream_class DirWriter
35 verbose stack Error: EACCES, mkdir '/usr/local/lib/node_modules/LsSeed'
35 verbose stack     at Error (native)
36 verbose fstream_stack /usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23
36 verbose fstream_stack /usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:46:53
36 verbose fstream_stack FSReqWrap.oncomplete (fs.js:99:15)
37 verbose cwd /Users/weaamalgheraibi/Desktop/NEI/OSCTR/ls-seed
38 error Darwin 14.1.0
39 error argv "node" "/usr/local/bin/npm" "install" "-g"
40 error node v0.12.0
41 error npm  v2.5.1
42 error path /usr/local/lib/node_modules/LsSeed
43 error code EACCES
44 error errno -13
45 error Error: EACCES, mkdir '/usr/local/lib/node_modules/LsSeed'
45 error     at Error (native)
45 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/LsSeed']
45 error   errno: -13,
45 error   code: 'EACCES',
45 error   path: '/usr/local/lib/node_modules/LsSeed',
45 error   fstream_type: 'Directory',
45 error   fstream_path: '/usr/local/lib/node_modules/LsSeed',
45 error   fstream_class: 'DirWriter',
45 error   fstream_stack:
45 error    [ '/usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
45 error      '/usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:46:53',
45 error      'FSReqWrap.oncomplete (fs.js:99:15)' ] }
46 error Please try running this command again as root/Administrator.
47 verbose exit [ -13, true ]
48 verbose unbuild lib/node_modules/LsSeed
49 verbose gentlyRm vacuuming /usr/local/lib/node_modules/LsSeed
